# Separate to the main build workflow for access to develop
# environment secrets, largely similar to build.yaml.
name: Build and Deploy develop
on:
  push:
    branches: [ develop, t3chguy/develop ]
  repository_dispatch:
    types: [ element-web-notify ]
concurrency:
  group: ${{ github.repository_owner }}-${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true
jobs:
  build:
    name: "Build & Deploy"
    # Only respect triggers from our develop branch, ignore that of forks
    if: github.repository == 'vector-im/element-web'
    runs-on: ubuntu-latest
    environment: develop
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v3
        with:
          cache: 'yarn'

      - name: Install Dependencies
        run: "./scripts/layered.sh"

      - name: Build, Package & Upload sourcemaps
        run: "./scripts/ci_package.sh"
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_URL: ${{ secrets.SENTRY_URL }}
          SENTRY_ORG: element
          SENTRY_PROJECT: riot-web

      - id: package
        run: |
          mv dist/element-*.tar.gz dist/develop.tar.gz
          files=$(ls webapp/bundles/)
          echo "::set-output name=bundlehash::${files[0]}"

      # We keep the latest develop.tar.gz as the artifact uploaded later expires after 24 and requires auth to download
      # Element Desktop's fetch script uses this tarball to fetch latest develop to build Nightlies.
      # TODO: remove this once the element-desktop fetch script is updated to grab develop.element.io/develop.tar.gz
#      - name: Deploy develop.tar.gz to Github Pages
#        uses: JamesIves/github-pages-deploy-action@v4
#        with:
#          folder: dist
#          single-commit: true

#      - uses: actions/upload-artifact@v3
#        with:
#          name: webapp
#          path: dist/develop.tar.gz
#          retention-days: 1

#      - name: Wait for other steps to succeed
#        uses: lewagon/wait-on-check-action@v1.1.2
#        with:
#          ref: ${{ github.ref }}
#          running-workflow-name: 'Build & Deploy'
#          repo-token: ${{ secrets.GITHUB_TOKEN }}
#          wait-interval: 10
#          check-regexp: ^((?!SonarQube|issues|board).)*$

      - name: Populate _redirects
        run: |
          echo "/develop.tar.gz https://${R2_PUBLIC_URL}/develop.tar.gz 301" >> webapp/_redirects
          for bundle in $(aws s3 ls s3://$R2_BUCKET/bundles/ --endpoint-url $R2_URL --region=auto | awk '{print $2}'); do
            echo "/bundles/${bundle}/* https://${R2_PUBLIC_URL}/bundles/${bundle}/:splat 301" >> webapp/_redirects
          done
          cat webapp/_redirects
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.CF_R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CF_R2_TOKEN }}
          R2_BUCKET: 'element-web-develop'
          R2_URL: ${{ secrets.CF_R2_S3_API }}
          R2_PUBLIC_URL: 'https://pub-842f08e362de4d678ba672fb09bfdfd6.r2.dev'

      - name: Deploy to R2
        run: |
          aws s3 cp dist/develop.tar.gz s3://$R2_BUCKET/develop.tar.gz --endpoint-url $R2_URL --region=auto
          aws s3 cp webapp/bundles/$HASH s3://$R2_BUCKET/bundles/$HASH --recursive --endpoint-url $R2_URL --region=auto
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.CF_R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CF_R2_TOKEN }}
          R2_BUCKET: 'element-web-develop'
          R2_URL: ${{ secrets.CF_R2_S3_API }}
          HASH: ${{ steps.package.outputs.bundlehash }}
          
      - name: Deploy to develop.element.io
        uses: cloudflare/pages-action@1
        with:
          apiToken: ${{ secrets.CF_PAGES_TOKEN }}
          accountId: ${{ secrets.CF_PAGES_ACCOUNT_ID }}
          projectName: element-web-develop
          directory: webapp
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
    
